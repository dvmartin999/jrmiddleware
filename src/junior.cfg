# This is a sample configuration file for the JR ("Junior") middleware.
# It is recommended that you maintain default settings.
#
# Note that several parameters apply per connection (that is, the
# settings apply for each communication client) and others
# apply per Run-Time Engine instance.  The RTE may be started manually
# prior to connection requests from clients; otherwise, the RTE
# will be started automatically by the first connecting client.


# Junior maintains a history buffer of incoming messages for two reasons:
#  1) To detect duplicate messages
#  2) To reconstruct large messages that have been parsed into
#     multiple packets.
# The history buffer needs to be finite in size, so that excessive
# memory is not consumed.  The MaxMsgHistory marks the maximum message
# size that the history is allowed to store at any one time.  The OldMsgTimeout
# marks an age, in seconds, at which a message is removed from the history.
# These values may need to be increased for particularly slow connections.
MaxMsgHistory       = 50
OldMsgTimeout       = 3

# By default, Junior will detect a message that is received twice at a 
# particular destination.  This often occurs in complex networks, in which
# a message may be routed to an end-point over two different paths.  If 
# detection is turned off, the application must be prepared to handle 
# duplicate messages.
DropDuplicateMsgs   = 1

# Junior features an integrated informational and debugging logging system
# that prints error and status information to the screen, or saves it in 
# a log file.  If the "LogFileName" parameter is specified, all logging information
# is written to the given file.  Otherwise, it's displayed in a text window.
#LogFileName = junior.log

# Junior supports up to 5 levels of logging.  Each increase in logging level
# records additional information, but may reduce performance.
# The "LogMsgLevel" parameters must be set to one of the following values:
#           0 = No logging
#           1 = On errors only
#           2 = Errors and start-up/shutdown status
#           3 = Errors, start-up/shutdown, and warnings
#           4 = Errors, start-up/shutdown, warnings, and limited debug
#           5 = Full reporting: WARNING!  Very slow performance at this level!
#
LogMsgLevel = 3

# Junior splits large messages into discrete packets for 
# transport, similar to IP's implementation of MTU (maximum
# transfer size).  The default value of 4079 is defined by JAUS,
# and works for most IP and wired serial.  Many 902-928 radios 
# have smaller buffers, however, requiring that messages are
# broken up more than JAUS dictates.  The MTU_Size is the number
# of bytes, excluding the header bytes added by Junior, that
# may be sent in any single packet.
MTU_Size = 4079


# The following values are set per Run-Time Engine instance, and are
# configured only once when the RTE is started.
#
#
# The MaxBufferSize denotes that maximum size, in bytes, of the send
# and receive buffers for socket communication.  A large value
# allows for large or frequent messages to be passed without
# loss; however, more system resources are required.  If the middleware
# is losing messages in a lossless network environment, increase
# this value.
MaxBufferSize   = 70000

# By default, Junior middleware uses UDP communication.  This can be 
# deactivated by uncommenting the following configuration parameter.
# Note that if UDP, TCP and Serial communication are deactivated,
# Junior will only function for inter-process (same CPU) communications.
EnableUDPInterface = 1

# By default, Junior uses the port reserved for JAUS as assigned
# by the IANA for all UDP traffic.  Changing this port assignment is not recommended.
UDP_Port        = 3794

# For UDP communications, Junior is able to discover remote entities
# at run-time using a broadcast-based search method.  It is also possible
# to specify the a priori discovery through an address book.  
# The address book tells Junior about the IP addresses and ports for remote systems.  
# This optional configuration parameter may point to a file that contains addresses 
# of the form: id = ip_address:port_number.
#UDP_AddressBook = addresses.cfg

# Junior implements broadcast through UDP multicast in order to 
# provide limits on the proliferation of broadcast messages.  The Time
# To Live, or TTL, can be set to limit the number of routers a broadcast
# may pass through before it is restricted.  Increasing this value
# will increase proliferation of a broadcast on a network.
MulticastTTL    = 16

# Junior restricts broadcasts to a multicast IP address.  This allows
# the systems engineer to create teams of systems that are
# independent of each other.  Note that systems must have the same
# multicast IP address if they are intended to interact.
MulticastAddr   = 239.255.0.1

# By default, Junior provides relay services to increase the scope of
# wireless networks.  This service does use additional bandwidth, and
# should be deactivated (set to zero) in bandwidth limited situations.
AllowRelay      = 1

# OPC Headers are supported for backward compatibility, but
# are not recommended.  By default, 5669 headers are used.
UseOPC2.75_Header = 0

# The Junior RTE runs cyclically as a background application to ensure
# smooth routing and delivery of messages.  To avoid overloading the CPU,
# the period of executation can be adjusted by the "RTE_CycleTime" parameter.
# This sleep time is measured in milliseconds.  A high value frees up more
# system resources for other tasks, but increases the latency in the 
# delivery of messages.
RTE_CycleTime = 1

# Maximum number of times to resend a message marked for Guarenteed Delivery
# that was not acknowledged by the receiver.  The message is sent a total
# of (MaxAckNakRetries+1), as the first send is not considered a retry.
MaxAckNakRetries = 3

# Number of milliseconds to wait between resending of a message
# marked for Guarenteed Delivery that was not acknowledged by the receiver.
AckTimeout = 100

# By default, Junior middleware does not use Serial communication.
# This can be activated by uncommenting the following configuration parameter.
# Note that if all communications are deactivated,
# Junior will only function for inter-process (same CPU) communications.
EnableSerialInterface = 0

# Set the name of the serial port for Junior to use.  For Windows, this
# is usually of the form "COMn" where n is a number between 1 and 8.  For
# Linux, it's usually "ttySn" where n is a number between 0 and 7.
SerialPortName = com5

# Select the serial BAUD rate.
SerialBaudRate = 19200

# Junior will use 8 bits for data transmission, and this
# value is not configurable.  The parity and number of stop bits is configurable,
# and must match the remote device settings to ensure data is not corrupted.
# By default, Junior uses no parity, and 1 stop bit.  This is often referred to
# as "8N1".  Parity may take the value of: even, odd, or none.  Stop bits may have
# a value of 1 or 2.  
SerialParity = none
SerialStopBits = 1

# Most implementations for RS-232 serial ports make use of the RTS and CTS lines
# to signal when a remote device is ready to write or receive data.  This is
# called hardware flow control.  Alternatively, software flow control can be used,
# but is much less efficient.  The following configuration item should
# only be enabled if hardware flow control is not supported on the communication port.
SerialSoftwareFlowControl = 0

# By default, Junior middleware does not use TCP communication.
# This can be activated by uncommenting the following configuration parameter.
# Note that if all communications are deactivated,
# Junior will only function for inter-process (same CPU) communications.
EnableTCPInterface = 0

# Junior uses the TCP/IP port reserved for JAUS traffic as assigned by the IANA.  
# Changing this port assignment is not recommended.
TCP_Port = 3794

# Unlike UDP, TCP-based systems cannot auto-detect other Junior entities
# available for communication.  Instead, an address book must be specified
# that tells Junior about the IP addresses and ports for remote systems.
#TCP_AddressBook = addresses.cfg